phases:
- template: /eng/build.yml
  parameters:
    phaseName: Windows
    agentOs: Windows_NT
    queue: 
      name: DotNetCore-Build
      demands:
        - agent.os -equals Windows_NT
      parallel: 3
      matrix:
        Build_Debug:
          _BuildConfig: Debug
          _BuildArch: x64
        Build_Release:
          _BuildConfig: Release
          _BuildArch: x64
          _PublishArtifacts: bin
        Build_Release_x86:
          _BuildConfig: Release
          _BuildArch: x86
          _PublishArtifacts: bin/Windows_NT.x86

- template: /eng/build.yml
  parameters:
    phaseName: CentOS_7
    agentOs: Linux
    dockerImage: microsoft/dotnet-buildtools-prereqs:centos-7-c103199-20180628120549
    queue:
      name: DotNet-Build
      demands:
        - agent.os -equals Linux
      parallel: 2
      matrix:
        Build_Debug:
          _BuildConfig: Debug
          _BuildArch: x64
          _PublishArtifacts: bin/Linux.x64
        Build_Release:
          _BuildConfig: Release
          _BuildArch: x64
          _PublishArtifacts: bin/Linux.x64

- template: /eng/build.yml
  parameters:
    phaseName: MacOS
    agentOs: Darwin
    queue: 
      name: Hosted macOS Preview
      demands:
        - agent.os -equals Darwin
      parallel: 2
      matrix:
        Build_Debug:
          _BuildConfig: Debug
          _BuildArch: x64
        Build_Release:
          _BuildConfig: Release
          _BuildArch: x64
          _PublishArtifacts: bin/OSX.x64

- template: /eng/build.yml
  parameters:
    phaseName: Debian_Stretch
    agentOs: Linux
    dockerImage: microsoft/dotnet-buildtools-prereqs:debian-stretch-c103199-20180628122423
    dependsOn: CentOS_7
    testOnly: true
    queue:
      name: DotNet-Build
      demands:
        - agent.os -equals Linux
      matrix:
        Build_Debug:
          _BuildConfig: Debug
          _BuildArch: x64

- template: /eng/build.yml
  parameters:
    phaseName: Fedora_27
    agentOs: Linux
    dockerImage: microsoft/dotnet-buildtools-prereqs:fedora-27-c103199-20180628122443
    dependsOn: CentOS_7
    testOnly: true
    queue:
      name: DotNet-Build
      demands:
        - agent.os -equals Linux
      matrix:
        Build_Debug:
          _BuildConfig: Debug
          _BuildArch: x64

- template: /eng/build.yml
  parameters:
    phaseName: Fedora_28
    agentOs: Linux
    dockerImage: microsoft/dotnet-buildtools-prereqs:fedora-28-c103199-20180628122443
    dependsOn: CentOS_7
    testOnly: true
    queue:
      name: DotNet-Build
      demands:
        - agent.os -equals Linux
      matrix:
        Build_Debug:
          _BuildConfig: Debug
          _BuildArch: x64

- template: /eng/build.yml
  parameters:
    phaseName: OpenSuse_42_1
    agentOs: Linux
    dockerImage: microsoft/dotnet-buildtools-prereqs:opensuse-42.1-c103199-20180628122439
    dependsOn: CentOS_7
    testOnly: true
    queue:
      name: DotNet-Build
      demands:
        - agent.os -equals Linux
      matrix:
        Build_Debug:
          _BuildConfig: Debug
          _BuildArch: x64

- template: /eng/build.yml
  parameters:
    phaseName: OpenSuse_42_3
    agentOs: Linux
    dockerImage: microsoft/dotnet-buildtools-prereqs:opensuse-42.3-c103199-20180628122439
    dependsOn: CentOS_7
    testOnly: true
    queue:
      name: DotNet-Build
      demands:
        - agent.os -equals Linux
      matrix:
        Build_Debug:
          _BuildConfig: Debug
          _BuildArch: x64

- template: /eng/build.yml
  parameters:
    phaseName: Ubuntu_14_04
    agentOs: Linux
    dockerImage: microsoft/dotnet-buildtools-prereqs:ubuntu-14.04-c103199-20180628134413
    dependsOn: CentOS_7
    testOnly: true
    queue:
      name: DotNet-Build
      demands:
        - agent.os -equals Linux
      matrix:
        Build_Debug:
          _BuildConfig: Debug
          _BuildArch: x64

- template: /eng/build.yml
  parameters:
    phaseName: Ubuntu_16_04
    agentOs: Linux
    dockerImage: microsoft/dotnet-buildtools-prereqs:ubuntu-16.04-c103199-20180628134544
    dependsOn: CentOS_7
    testOnly: true
    queue:
      name: DotNet-Build
      demands:
        - agent.os -equals Linux
      matrix:
        Build_Debug:
          _BuildConfig: Debug
          _BuildArch: x64

- template: /eng/build.yml
  parameters:
    phaseName: Ubuntu_17_10
    agentOs: Linux
    dockerImage: microsoft/dotnet-buildtools-prereqs:ubuntu-17.10-c103199-20180628134544
    dependsOn: CentOS_7
    testOnly: true
    queue:
      name: DotNet-Build
      demands:
        - agent.os -equals Linux
      matrix:
        Build_Debug:
          _BuildConfig: Debug
          _BuildArch: x64

- template: /eng/build.yml
  parameters:
    phaseName: Ubuntu_18_04
    agentOs: Linux
    dockerImage: microsoft/dotnet-buildtools-prereqs:ubuntu-18.04-c103199-20180628134610
    dependsOn: CentOS_7
    testOnly: true
    queue:
      name: DotNet-Build
      demands:
        - agent.os -equals Linux
      matrix:
        Build_Debug:
          _BuildConfig: Debug
          _BuildArch: x64

- phase: Sign_Package_Publish
  dependsOn:
  - Windows
  - CentOS_7
  - MacOS
  queue:
    name: DotNetCore-Build
    demands:
      - agent.os -equals Windows_NT
  steps: 
  - task: ms-vseng.MicroBuildTasks.30666190-6959-11e5-9f96-f56098202fef.MicroBuildSigningPlugin@1
    displayName: Install MicroBuild plugin
    inputs:
      signType: real
      zipSources: false
      esrpSigning: true
    env:
      TeamName: DotNetCore
    continueOnError: false
    condition: succeeded()

  - task: AzureKeyVault@1
    inputs:
      azureSubscription: 'DotNet-Engineering-Services_KeyVault'
      KeyVaultName: EngKeyVault
      SecretsFilter: 'dotnetfeed-storage-access-key-1'
    condition: succeeded()

  # Windows x64 download, copy and archive. Everything under "bin" is published for the Windows x64 build.

  - task: DownloadBuildArtifacts@0
    displayName: Download Windows x64 and Managed Artifacts
    inputs:
      artifactName: Windows_Build_Release
      downloadPath: '$(System.ArtifactsDirectory)'
    condition: succeeded()

  - task: CopyFiles@2
    displayName: Copy Windows Artifacts
    inputs:
      sourceFolder: '$(System.ArtifactsDirectory)/Windows_Build_Release'
      targetFolder: '$(Build.SourcesDirectory)/artifacts/Release/bin'
    condition: succeeded()

  - task: ArchiveFiles@2
    displayName: Archive Windows x64 Artifacts
    inputs:
      archiveType: zip
      includeRootFolder: false
      rootFolderOrFile: '$(Build.SourcesDirectory)/artifacts/Release/bin/Windows_NT.x64'
      archiveFile: '$(Build.SourcesDirectory)/artifacts/Release/sos-win-x64.zip'
    condition: succeeded()

  # Windows x86 download, copy and archive.

  - task: DownloadBuildArtifacts@0
    displayName: Download Windows x86 Artifacts
    inputs:
      artifactName: Windows_Build_Release_x86
      downloadPath: '$(System.ArtifactsDirectory)'
    condition: succeeded()

  - task: CopyFiles@2
    displayName: Copy Windows x86 Artifacts
    inputs:
      sourceFolder: '$(System.ArtifactsDirectory)/Windows_Build_Release_x86'
      targetFolder: '$(Build.SourcesDirectory)/artifacts/Release/bin/Windows_NT.x86'
    condition: succeeded()

  - task: CopyFiles@2
    displayName: Copy Windows x86 Artifacts
    inputs:
      sourceFolder: '$(Build.SourcesDirectory)/artifacts/Release/bin/SOS.NETCore/netcoreapp1.0'
      contents: 'SOS.NETCore.dll'
      overWrite: true
      targetFolder: '$(Build.SourcesDirectory)/artifacts/Release/bin/Windows_NT.x86'
    condition: succeeded()

  - task: ArchiveFiles@2
    displayName: Archive Windows x86 Artifacts
    inputs:
      archiveType: zip
      includeRootFolder: false
      rootFolderOrFile: '$(Build.SourcesDirectory)/artifacts/Release/bin/Windows_NT.x86'
      archiveFile: '$(Build.SourcesDirectory)/artifacts/Release/sos-win-x86.zip'
    condition: succeeded()
  
  # Copy and archive the files for windbg extension gallery.

  - task: CopyFiles@2
    displayName: Copy Extension Gallery Files
    inputs:
      sourceFolder: '$(Build.SourcesDirectory)/artifacts/Release/bin/Windows_NT.x64'
      contents: 'sos.dll'
      targetFolder: '$(Build.SourcesDirectory)/artifacts/Release/gallery/x64'
    condition: succeeded()

  - task: CopyFiles@2
    displayName: Copy Extension Gallery Files
    inputs:
      sourceFolder: '$(Build.SourcesDirectory)/artifacts/Release/bin/SOS.NETCore/netcoreapp1.0'
      contents: 'SOS.NETCore.dll'
      overWrite: true
      targetFolder: '$(Build.SourcesDirectory)/artifacts/Release/gallery/x64'
    condition: succeeded()

  - task: CopyFiles@2
    displayName: Copy Extension Gallery Files
    inputs:
      sourceFolder: '$(Build.SourcesDirectory)/artifacts/Release/bin/Windows_NT.x86'
      contents: 'sos.dll'
      targetFolder: '$(Build.SourcesDirectory)/artifacts/Release/gallery/x86'
    condition: succeeded()

  - task: CopyFiles@2
    displayName: Copy Extension Gallery Files
    inputs:
      sourceFolder: '$(Build.SourcesDirectory)/artifacts/Release/bin/SOS.NETCore/netcoreapp1.0'
      contents: 'SOS.NETCore.dll'
      overWrite: true
      targetFolder: '$(Build.SourcesDirectory)/artifacts/Release/gallery/x86'
    condition: succeeded()

  - task: CopyFiles@2
    displayName: Copy Extension Gallery Files
    inputs:
      sourceFolder: '$(Build.SourcesDirectory)/eng'
      contents: 'GalleryManifest.xml'
      targetFolder: '$(Build.SourcesDirectory)/artifacts/Release/gallery'
    condition: succeeded()

  - task: ArchiveFiles@2
    displayName: Archive Extension Gallery Files
    inputs:
      archiveType: zip
      includeRootFolder: false
      rootFolderOrFile: '$(Build.SourcesDirectory)/artifacts/Release/gallery'
      archiveFile: '$(Build.SourcesDirectory)/artifacts/Release/sos-gallery.zip'
    condition: succeeded()

  # Linux download, copy and archive

  - task: DownloadBuildArtifacts@0
    displayName: Download Linux Artifacts
    inputs:
      artifactName: CentOS_7_Build_Release
      downloadPath: '$(System.ArtifactsDirectory)'
    condition: succeeded()

  - task: CopyFiles@2
    displayName: Copy Linux Artifacts
    inputs:
      sourceFolder: '$(System.ArtifactsDirectory)/CentOS_7_Build_Release'
      targetFolder: '$(Build.SourcesDirectory)/artifacts/Release/bin/Linux.x64'
    condition: succeeded()

  - task: CopyFiles@2
    displayName: Copy Linux Artifacts
    inputs:
      sourceFolder: '$(Build.SourcesDirectory)/artifacts/Release/bin/SOS.NETCore/netcoreapp1.0'
      contents: 'SOS.NETCore.dll'
      overWrite: true
      targetFolder: '$(Build.SourcesDirectory)/artifacts/Release/bin/Linux.x64'
    condition: succeeded()

  - task: ArchiveFiles@2
    displayName: Archive Linux Artifacts
    inputs:
      archiveType: tar
      includeRootFolder: false
      tarCompression: gz
      rootFolderOrFile: '$(Build.SourcesDirectory)/artifacts/Release/bin/Linux.x64'
      archiveFile: '$(Build.SourcesDirectory)/artifacts/Release/sos-linux-x64.tar.gz'
    condition: succeeded()

  # MacOS download, copy and archive

  - task: DownloadBuildArtifacts@0
    displayName: Download MacOS Artifacts
    inputs:
      artifactName: MacOS_Build_Release
      downloadPath: '$(System.ArtifactsDirectory)'
    condition: succeeded()

  - task: CopyFiles@2
    displayName: Copy MacOS Artifacts
    inputs:
      sourceFolder: '$(System.ArtifactsDirectory)/MacOS_Build_Release'
      targetFolder: '$(Build.SourcesDirectory)/artifacts/Release/bin/OSX.x64'
    condition: succeeded()

  - task: CopyFiles@2
    displayName: Copy MacOS Artifacts
    inputs:
      sourceFolder: '$(Build.SourcesDirectory)/artifacts/Release/bin/SOS.NETCore/netcoreapp1.0'
      contents: 'SOS.NETCore.dll'
      overWrite: true
      targetFolder: '$(Build.SourcesDirectory)/artifacts/Release/bin/OSX.x64'
    condition: succeeded()

  - task: ArchiveFiles@2
    displayName: Archive MacOS Artifacts
    inputs:
      archiveType: tar
      includeRootFolder: false
      tarCompression: gz
      rootFolderOrFile: '$(Build.SourcesDirectory)/artifacts/Release/bin/OSX.x64'
      archiveFile: '$(Build.SourcesDirectory)/artifacts/Release/sos-osx-x64.tar.gz'
    condition: succeeded()

  # Create nuget package and sign binaries

  - script: $(Build.SourcesDirectory)\eng\cipack.cmd
      -configuration Release
      -prepareMachine 
      /p:SignType=$(SignType)
      /p:PB_PublishBlobFeedKey=$(dotnetfeed-storage-access-key-1) 
      /p:PB_PublishBlobFeedUrl=https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json
      /p:PB_PublishType=$(PublishType)
    displayName: Sign / Package
    env:
      OfficialBuildId: $(BUILD.BUILDNUMBER)
    continueOnError: true
    condition: succeeded()

  # Optionally drop the artifacts on a share

  - task: PublishBuildArtifacts@1
    displayName: Drop Artifacts
    inputs:
      publishLocation: FilePath
      pathtoPublish: '$(Build.SourcesDirectory)\artifacts\Release'
      artifactName: '$(Build.BuildNumber)'
      targetPath: '$(DropRoot)\DotNetCore\$(Build.DefinitionName)'
    condition: and(succeeded(), eq(variables['DropArtifacts'], 'true'))

  # Optionally publish the packages to a myget feed

  - task: NuGetCommand@2
    displayName: Publish TestHelpers to MyGet dotnet-buildtools feed
    inputs:
      command: custom
      arguments: 'push $(Build.SourcesDirectory)\artifacts\Release\packages\Shipping\Microsoft.Diagnostic.TestHelpers.*.nupkg -ApiKey $(dotnet-myget-org-api-key) -Source $(MyGetBuildToolsFeed)'
    condition: and(succeeded(), eq(variables['PushPackages'], 'true'))

