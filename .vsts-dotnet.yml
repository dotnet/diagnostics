trigger:
- master
- release/*

pr:
- master
- release/*

jobs:
- template: /eng/build.yml
  parameters:
    name: Windows
    osGroup: Windows_NT
    strategy:
      matrix:
        Build_Debug:
          _BuildConfig: Debug
          _BuildArch: x64
        Build_Release:
          _BuildConfig: Release
          _BuildArch: x64
          _PublishArtifacts: bin
        Build_Release_x86:
          _BuildConfig: Release
          _BuildArch: x86
          _PublishArtifacts: bin/Windows_NT.x86.Release
        Build_Release_arm:
          _BuildOnly: true
          _BuildConfig: Release
          _BuildArch: arm
          _PublishArtifacts: bin/Windows_NT.arm.Release

- template: /eng/build.yml
  parameters:
    name: CentOS_7
    osGroup: Linux
    dockerImage: mcr.microsoft.com/dotnet-buildtools/prereqs:centos-7-3e800f1-20190501005343
    strategy:
      matrix:
        Build_Debug:
          _BuildConfig: Debug
          _BuildArch: x64
          _PublishArtifacts: bin/Linux.x64.Debug
        Build_Release:
          _BuildConfig: Release
          _BuildArch: x64
          _PublishArtifacts: bin/Linux.x64.Release

- template: /eng/build.yml
  parameters:
    name: Linux_cross
    osGroup: Linux
    dockerImage: mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-14.04-cross-1735d26-20190521133857
    crossrootfsDir: '/crossrootfs/arm'
    strategy:
      matrix:
        Build_Release:
          _BuildOnly: true
          _BuildConfig: Release
          _BuildArch: arm
          _PublishArtifacts: bin/Linux.arm.Release

- template: /eng/build.yml
  parameters:
    name: Linux_cross64
    osGroup: Linux
    dockerImage: mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-16.04-cross-arm64-a3ae44b-20180315221921
    crossrootfsDir: '/crossrootfs/arm64'
    strategy:
      matrix:
        Build_Release:
          _BuildOnly: true
          _BuildConfig: Release
          _BuildArch: arm64
          _PublishArtifacts: bin/Linux.arm64.Release

- template: /eng/build.yml
  parameters:
    name: Alpine3_6
    osGroup: Linux
    dockerImage: mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.6-WithNode-f4d3fe3-20181220200247
    strategy:
      matrix:
        Build_Release:
          _BuildConfig: Release
          _BuildArch: x64
          _PublishArtifacts: bin/Linux.x64.Release

- template: /eng/build.yml
  parameters:
    name: MacOS
    osGroup: MacOS
    strategy:
      matrix:
        Build_Release:
          _BuildConfig: Release
          _BuildArch: x64
          _PublishArtifacts: bin/OSX.x64.Release

# Test only legs

- template: /eng/build.yml
  parameters:
    name: Debian_Stretch
    osGroup: Linux
    dockerImage: mcr.microsoft.com/dotnet-buildtools/prereqs:debian-stretch-3e800f1-20190521154431
    dependsOn: CentOS_7
    testOnly: true
    strategy:
      matrix:
        Build_Debug:
          _BuildConfig: Debug
          _BuildArch: x64

- template: /eng/build.yml
  parameters:
    name: Fedora_28
    osGroup: Linux
    dockerImage: mcr.microsoft.com/dotnet-buildtools/prereqs:fedora-28-09ca40b-20190508143249
    dependsOn: CentOS_7
    testOnly: true
    strategy:
      matrix:
        Build_Debug:
          _BuildConfig: Debug
          _BuildArch: x64

- template: /eng/build.yml
  parameters:
    name: Fedora_29
    osGroup: Linux
    dockerImage: mcr.microsoft.com/dotnet-buildtools/prereqs:fedora-29-09ca40b-20190508143249
    dependsOn: CentOS_7
    testOnly: true
    strategy:
      matrix:
        Build_Debug:
          _BuildConfig: Debug
          _BuildArch: x64

- template: /eng/build.yml
  parameters:
    name: OpenSuse_42_1
    osGroup: Linux
    dockerImage: mcr.microsoft.com/dotnet-buildtools/prereqs:opensuse-42.1-c103199-20180628122439
    dependsOn: CentOS_7
    testOnly: true
    strategy:
      matrix:
        Build_Debug:
          _BuildConfig: Debug
          _BuildArch: x64

- template: /eng/build.yml
  parameters:
    name: OpenSuse_42_3
    osGroup: Linux
    dockerImage: mcr.microsoft.com/dotnet-buildtools/prereqs:opensuse-42.3-3e800f1-20190501005344
    dependsOn: CentOS_7
    testOnly: true
    strategy:
      matrix:
        Build_Debug:
          _BuildConfig: Debug
          _BuildArch: x64

- template: /eng/build.yml
  parameters:
    name: Ubuntu_14_04
    osGroup: Linux
    dockerImage: mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-14.04-1735d26-20190521133852
    dependsOn: CentOS_7
    testOnly: true
    strategy:
      matrix:
        Build_Debug:
          _BuildConfig: Debug
          _BuildArch: x64

- template: /eng/build.yml
  parameters:
    name: Ubuntu_16_04
    osGroup: Linux
    dockerImage: mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-16.04-09ca40b-20190520220842
    dependsOn: CentOS_7
    testOnly: true
    strategy:
      matrix:
        Build_Debug:
          _BuildConfig: Debug
          _BuildArch: x64

- template: /eng/build.yml
  parameters:
    name: Ubuntu_18_04
    osGroup: Linux
    dockerImage: mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-3e800f1-20190508143252
    dependsOn: CentOS_7
    testOnly: true
    strategy:
      matrix:
        Build_Debug:
          _BuildConfig: Debug
          _BuildArch: x64

# Download, sign, package and publish

- template: /eng/common/templates/job/job.yml
  parameters:
    name: Sign_Package_Publish
    dependsOn:
    - Windows
    - CentOS_7
    - Alpine3_6
    - MacOS
    - Linux_cross
    - Linux_cross64
    condition: succeeded()
    pool:
      name: NetCoreInternal-Pool
      queue: BuildPool.Windows.10.Amd64.VS2017
    variables:
    - _PublishBlobFeedUrl: https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json
    - _TeamName: DotNetCore
    - _SignType: $(SignType)
    enableMicrobuild: true
    steps:

    # Windows x64 download. Everything under "bin" is published for the Windows x64 build.

    - task: DownloadPipelineArtifact@2
      displayName: Download Windows x64 and Managed Artifacts
      inputs:
        artifactName: Windows_x64_Release
        targetPath: '$(Build.SourcesDirectory)/artifacts/bin'
      condition: succeeded()

    # Windows x86 download

    - task: DownloadPipelineArtifact@2
      displayName: Download Windows x86 Artifacts
      inputs:
        artifactName: Windows_x86_Release
        targetPath: '$(Build.SourcesDirectory)/artifacts/bin/Windows_NT.x86.Release'
      condition: succeeded()

    # Windows arm download

    - task: DownloadPipelineArtifact@2
      displayName: Download Windows Arm Artifacts
      inputs:
        artifactName: Windows_arm_Release
        targetPath: '$(Build.SourcesDirectory)/artifacts/bin/Windows_NT.arm.Release'
      condition: succeeded()

    # Linux x64 download

    - task: DownloadPipelineArtifact@2
      displayName: Download Linux Artifacts
      inputs:
        artifactName: CentOS_7_x64_Release
        targetPath: '$(Build.SourcesDirectory)/artifacts/bin/Linux.x64.Release'
      condition: succeeded()

    # Linux MUSL x64 download

    - task: DownloadPipelineArtifact@2
      displayName: Download Linux Musl Artifacts
      inputs:
        artifactName: Alpine3_6_x64_Release
        targetPath: '$(Build.SourcesDirectory)/artifacts/bin/Linux-musl.x64.Release'
      condition: succeeded()

    # Linux arm download

    - task: DownloadPipelineArtifact@2
      displayName: Download Linux Arm Artifacts
      inputs:
        artifactName: Linux_cross_arm_Release
        targetPath: '$(Build.SourcesDirectory)/artifacts/bin/Linux.arm.Release'
      condition: succeeded()

    # Linux arm64 download

    - task: DownloadPipelineArtifact@2
      displayName: Download Linux Arm64 Artifacts
      inputs:
        artifactName: Linux_cross64_arm64_Release
        targetPath: '$(Build.SourcesDirectory)/artifacts/bin/Linux.arm64.Release'
      condition: succeeded()

    # MacOS download

    - task: DownloadPipelineArtifact@2
      displayName: Download MacOS Artifacts
      inputs:
        artifactName: MacOS_x64_Release
        targetPath: '$(Build.SourcesDirectory)/artifacts/bin/OSX.x64.Release'
      condition: succeeded()

    # Create nuget packages, sign binaries and publish to blob feed

    - script: $(Build.SourcesDirectory)\eng\cipack.cmd
        -configuration Release
        -prepareMachine 
        -verbosity normal
        /p:TeamName=$(_TeamName)
        /p:DotNetSignType=$(SignType) 
        /p:DotNetPublishBlobFeedKey=$(dotnetfeed-storage-access-key-1) 
        /p:DotNetPublishBlobFeedUrl=$(_PublishBlobFeedUrl)
        /p:DotNetPublishToBlobFeed=$(PublishPackages)
        /p:OfficialBuildId=$(BUILD.BUILDNUMBER)
      displayName: Sign / Package
      continueOnError: true
      condition: succeeded()

    # Publish symbols

    - task: PowerShell@2
      displayName: Publish Symbols
      inputs:
        filePath: eng\common\sdk-task.ps1
        arguments: -task PublishToSymbolServers -restore -msbuildEngine dotnet -configuration Release -verbosity normal
          /p:UsingToolSymbolUploader=true
          /p:DotNetSymbolServerTokenMsdl=$(microsoft-symbol-server-pat)
          /p:DotNetSymbolServerTokenSymWeb=$(symweb-symbol-server-pat)
          /p:PDBArtifactsDirectory='$(Build.SourcesDirectory)/artifacts/SymStore/**'
          /p:BlobBasePath='$(Build.SourcesDirectory)/artifacts/packages/Release/**'
      continueOnError: true
      condition: and(succeeded(), eq(variables['PublishSymbols'], 'true'))

    # Publish package and log build artifacts

    - task: PublishBuildArtifacts@1
      displayName: Publish Package Artifacts
      inputs:
        publishLocation: Container
        pathtoPublish: '$(Build.SourcesDirectory)/artifacts/packages'
        artifactName: Packages
      continueOnError: true
      condition: always()

    - task: PublishBuildArtifacts@1
      displayName: Publish Logs Artifacts
      inputs:
        publishLocation: Container
        pathtoPublish: '$(Build.SourcesDirectory)/artifacts/log'
        artifactName: Logs_Packaging_Signing
      continueOnError: true
      condition: always()
