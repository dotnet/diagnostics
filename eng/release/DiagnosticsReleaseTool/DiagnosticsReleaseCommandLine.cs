// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.

using System.CommandLine;
using System.IO;
using System.Threading;
using System.Threading.Tasks;

using DiagnosticsReleaseTool.Impl;

namespace DiagnosticsReleaseTool.CommandLine
{
    internal sealed class DiagnosticsReleaseCommandLine
    {
        private static async Task<int> Main(string[] args)
        {
            RootCommand rootCommand = new()
            {
                PrepareRelease()
            };

            return await rootCommand.Parse(args).InvokeAsync();
        }

        public static Command PrepareRelease()
        {
            Command command = new(
                name: "prepare-release",
                description: "Given a darc drop, generates validated manifests and layouts to initiate a tool release.")
            {
                // Inputs
                InputDropPathOption, ToolManifestPathOption, ReleaseNameOption,
                // Toggles
                ToolManifestVerificationOption, DiagnosticLoggingOption,
                // Outputs
                StagingPathOption,
                AzureStorageAccountNameOption, AzureStorageAccountKeyOption, AzureStorageContainerNameOption
            };

            command.SetAction(static async (parseResult, ct) =>
            {
                Config config = new(
                    toolManifest: parseResult.GetValue(ToolManifestPathOption),
                    verifyToolManifest: parseResult.GetValue(ToolManifestVerificationOption),
                    inputDropPath: parseResult.GetValue(InputDropPathOption),
                    stagingDirectory: parseResult.GetValue(StagingPathOption),
                    releaseName: parseResult.GetValue(ReleaseNameOption),
                    accountName: parseResult.GetValue(AzureStorageAccountNameOption),
                    clientId: parseResult.GetValue(AzureStorageAccountKeyOption),
                    containerName: parseResult.GetValue(AzureStorageContainerNameOption)
                );

                bool isVerbose = parseResult.GetValue(DiagnosticLoggingOption);

                return await DiagnosticsReleaseRunner.PrepareRelease(config, isVerbose, ct).ConfigureAwait(false);
            });

            return command;
        }

        private static Option<bool> DiagnosticLoggingOption =
            new("--verbose", "-v")
            {
                Description = "Enables diagnostic logging"
            };

        private static Option<FileInfo> ToolManifestPathOption =
            new Option<FileInfo>("--tool-manifest", "-t")
            {
                Description = "Full path to the manifest of tools and packages to publish.",
                Required = true
            }.AcceptExistingOnly();

        private static Option<bool> ToolManifestVerificationOption =
            new("--verify-tool-manifest")
            {
                Description = "Verifies that the assets being published match the manifest",
                DefaultValueFactory = _ => true
            };

        private static Option<DirectoryInfo> InputDropPathOption =
            new Option<DirectoryInfo>("--input-drop-path", "-i")
            {
                Description = "Path to drop generated by `darc gather-drop`",
                Required = true
            }.AcceptExistingOnly();

        private static Option<string> ReleaseNameOption =
            new("--release-name", "-r")
            {
                Description = "Name of this release.",
                Required = true
            };


        private static readonly Option<DirectoryInfo> StagingPathOption = InitStagingPath();

        private static Option<DirectoryInfo> InitStagingPath()
        {
            Option<DirectoryInfo> option = new("--staging-directory", "-p")
            {
                Description = "Full path to the staging path.",
                DefaultValueFactory = _ => new DirectoryInfo(Path.Join(Path.GetTempPath(), Path.GetRandomFileName()))
            };
            option.AcceptLegalFilePathsOnly();
            return option;
        }

        private static Option<string> AzureStorageAccountNameOption =
            new("--account-name", "-n")
            {
                Description = "Storage account name, must be in public azure cloud.",
                Required = true,
            };

        private static Option<string> AzureStorageAccountKeyOption =
            new("--client-id", "-k")
            {
                Description = "Identity Client ID. If left blank, ambient identity will be used.",
                DefaultValueFactory = _ => null,
                Required = true,
            };

        private static Option<string> AzureStorageContainerNameOption =
            new("--container-name", "-c")
            {
                Description = "Storage account container name where the files will be uploaded.",
                Required = true,
            };
    }
}
