# build.yml
# Description: Defines the build phase
# Parameters:
#   agentOs: [Windows_NT (default), Linux, OSX] Used in templates to define variables which are OS specific
#   dockerImage: If defined, specifies docker image to run build steps in
#   matrix: build matrix
#   enableTelemetry: send telemetry if build is not a PR or CI build
#   queue YAML object - https://github.com/Microsoft/vsts-agent/blob/master/docs/preview/yamlgettingstarted-schema.md#queue
#   variables YAML object - https://github.com/Microsoft/vsts-agent/blob/master/docs/preview/yamlgettingstarted-schema.md#phase

parameters:
  name: ''
  agentOs: Windows_NT
  dockerImage: ''
  crossrootfsDir: ''
  testOnly: false
  dependsOn: ''
  # send telemetry
  enableTelemetry: true
  # install Microbuild plugin if not a public build
  enableMicrobuild: true
  # queue YAML object - https://github.com/Microsoft/vsts-agent/blob/master/docs/preview/yamlgettingstarted-schema.md#queue
  queue: {}
  # variables YAML object - https://github.com/Microsoft/vsts-agent/blob/master/docs/preview/yamlgettingstarted-schema.md#phase
  variables: {}

# Common conditionals:  There are a number of common conditionals that are useful.  Generally these are used to decide what resources can be accessed,
#                       or what logic should be applied based on the context the build is being run in.
#   - eq/ne(variables['Agent.Os'], 'Windows_NT') - Running/not running on a windows machine
#   - eq/ne(variables['System.TeamProject'], 'public') - Running/not running on the dotnet public VSTS project 
#   - and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest') - Not running in public and not a pull request.
#   - or(eq(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'PullRequest') - Running in public or a pull request.

phases:
- template: /eng/common/templates/phases/base.yml
  parameters:
    enableTelemetry: ${{ parameters.enableTelemetry }}
    enableMicrobuild: ${{ parameters.enableMicrobuild }}
    name: ${{ parameters.name }}
    agentOs: ${{ parameters.agentOs }}
    dependsOn: ${{ parameters.dependsOn }}
    queue: ${{ parameters.queue }}

    variables: 
      ${{ insert }}: ${{ parameters.variables }}
      _PortableLinuxBuild: CentOS_7_$(_BuildArch)_$(_BuildConfig)
      _DockerImageName: ${{ parameters.dockerImage }}
      _PhaseName : ${{ parameters.name }}
      _HelixType: build/product
      _HelixBuildConfig: $(_BuildConfig)

      # Only enable publishing in non-public, non PR scenarios.
      ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
        _HelixSource: official/dotnet/arcade/$(Build.SourceBranch)
      ${{ if or(eq(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'PullRequest')) }}:
        _HelixSource: pr/dotnet/arcade/$(Build.SourceBranch)

      ${{ if eq(parameters.testOnly, 'true') }}:
        _LinuxScript: $(Build.SourcesDirectory)/eng/citest.sh
      ${{ if ne(parameters.testOnly, 'true') }}:
        _LinuxScript: $(Build.SourcesDirectory)/eng/cibuild.sh

      ${{ if eq(variables['Build.Reason'], 'Schedule') }}:
        ${{ if eq(parameters.agentOs, 'Windows_NT') }}:
          _DailyTest: -daily-test
        ${{ if ne(parameters.agentOs, 'Windows_NT') }}:
          _DailyTest: --daily-test
      ${{ if ne(variables['Build.Reason'], 'Schedule') }}:
        _DailyTest: ''

      ${{ if eq(parameters.crossrootfsDir, '') }}:
        _RootFs: ''
      # This is only required for cross builds.
      ${{ if ne(parameters.crossrootfsDir, '') }}:
        _RootFs: --rootfs ${{ parameters.crossrootfsDir }}

    steps:
    - template: /eng/common/templates/steps/run-on-windows.yml
      parameters:
        agentOs: ${{ parameters.agentOs }} 
        steps:
        - script: $(Build.SourcesDirectory)\eng\cibuild.cmd $(_DailyTest)
            -configuration $(_BuildConfig) 
            -architecture $(_BuildArch)
            -prepareMachine 
            /p:OfficialBuildId=$(BUILD.BUILDNUMBER)
          displayName: Build / Test
          condition: succeeded()

    - ${{ if eq(parameters.agentOs, 'Linux') }}:
      - ${{ if eq(parameters.testOnly, 'true') }}:
        - task: DownloadBuildArtifacts@0
          displayName: Download Linux-x64 Artifacts
          inputs:
            artifactName: $(_PortableLinuxBuild)
            downloadPath: '$(System.ArtifactsDirectory)'
          condition: succeeded()

        - task: CopyFiles@2
          displayName: Place Linux-x64 Artifacts
          inputs:
            sourceFolder: '$(System.ArtifactsDirectory)/$(_PortableLinuxBuild)'
            targetFolder: '$(Build.SourcesDirectory)/artifacts/bin/Linux.x64.$(_BuildConfig)'
          condition: succeeded()

      - script: $(Build.SourcesDirectory)/eng/docker-build.sh 
          --docker-image $(_DockerImageName)
          --source-directory $(Build.SourcesDirectory)
          --container-name diagnostics-$(Build.BuildId)
          $(_LinuxScript) $(_DailyTest) $(_RootFs)
          --configuration $(_BuildConfig) 
          --architecture $(_BuildArch)
          --prepareMachine 
          /p:OfficialBuildId=$(BUILD.BUILDNUMBER)
          /p:BUILD_BUILDNUMBER=$(BUILD.BUILDNUMBER)
        displayName: Docker Build / Test
        condition: succeeded()

    - ${{ if eq(parameters.agentOs, 'Darwin') }}:
      - script: $(Build.SourcesDirectory)/eng/cibuild.sh $(_DailyTest)
          --configuration $(_BuildConfig) 
          --architecture $(_BuildArch)
          --prepareMachine
          /p:OfficialBuildId=$(BUILD.BUILDNUMBER)
        displayName: Build / Test
        condition: succeeded()
 
    - task: PublishBuildArtifacts@1
      displayName: Upload Artifacts
      inputs:
        pathtoPublish: '$(Build.SourcesDirectory)/artifacts/$(_PublishArtifacts)'
        artifactName: $(_PhaseName)_$(_BuildArch)_$(_BuildConfig)
      condition: and(succeeded(), ne(variables['_PublishArtifacts'], ''))

    - task: CopyFiles@2
      displayName: Gather Build Logs
      inputs:
        sourceFolder: '$(Build.SourcesDirectory)/artifacts'
        contents: '?(log|TestResults)/**'
        targetFolder: '$(Build.StagingDirectory)/BuildLogs'
      continueOnError: true
      condition: always()

    - task: PublishBuildArtifacts@1
      displayName: Publish Logs to VSTS
      inputs:
        PathtoPublish: '$(Build.StagingDirectory)/BuildLogs'
        PublishLocation: Container
        ArtifactName: Logs_$(_PhaseName)_$(_BuildArch)_$(_BuildConfig)
      continueOnError: true
      condition: always()
