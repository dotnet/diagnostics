# build.yml
# Description: Defines the build phase
# Parameters:
#   agentOs: [Windows_NT (default), Linux, OSX] Used in templates to define variables which are OS specific
#   dockerImage: If defined, specifies docker image to run build steps in
#   matrix: build matrix
#   queueName: agent pool name
#   enableTelemetry: send telemetry if build is not a PR or CI build

parameters:
  phaseName: ''
  agentOs: Windows_NT
  dockerImage: ''
  enableTelemetry: true
  queue: {}
  useEsrpSigning: true

phases:
- template: /eng/common/templates/phases/base.yml
  parameters:
    agentOs: ${{ parameters.agentOs }}
    buildConfig: $(_BuildConfig)
    phaseName: ${{ parameters.phaseName }}
    enableTelemetry: ${{ parameters.enableTelemetry }}
    helixType: build/product
    ${{ if notIn(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'PullRequest') }}:
      helixSource: official/dotnet/arcade/$(Build.SourceBranch)
    ${{ if in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'PullRequest') }}:
      helixSource: pr/dotnet/arcade/$(Build.SourceBranch)
    phase:
      queue: ${{ parameters.queue }}
      variables: 
        _DockerImageName: ${{ parameters.dockerImage }}
        _PhaseName : ${{ parameters.phaseName }}
        ${{ if notIn(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'PullRequest') }}:
          _PublishBlobFeedUrl: https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json
          _TeamName: DotNetCore
          _UseEsrpSigning: ${{ parameters.useEsrpSigning }}
        ${{ if notIn(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'PullRequest') }}:
          _PublishArgs: /p:PB_PublishBlobFeedKey=$(dotnetfeed-storage-access-key-1) 
            /p:PB_PublishBlobFeedUrl=$(_PublishBlobFeedUrl) 
            /p:PB_PublishType=$(_PublishType) 
        ${{ if in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'PullRequest') }}:
          _PublishArgs: ''

      steps:
      - template: /eng/common/templates/steps/run-on-windows.yml
        parameters:
          agentOs: ${{ parameters.agentOs }} 
          steps:
          - template: /eng/common/templates/steps/build-reason.yml
            parameters:
              conditions: not IndividualCI,BatchedCI,PullRequest
              steps:
              - task: ms-vseng.MicroBuildTasks.30666190-6959-11e5-9f96-f56098202fef.MicroBuildSigningPlugin@1
                displayName: Install MicroBuild plugin
                inputs:
                  signType: $(_SignType)
                  zipSources: false
                  esrpSigning: $(_UseEsrpSigning)
                env:
                  TeamName: $(_TeamName)
                continueOnError: false
                condition: and(succeeded(), in(variables._SignType, 'real', 'test'))
              - task: AzureKeyVault@1
                inputs:
                  azureSubscription: 'DotNet-Engineering-Services_KeyVault'
                  KeyVaultName: EngKeyVault
                  SecretsFilter: 'dotnetfeed-storage-access-key-1'
                condition: succeeded()
          - script: $(Build.SourcesDirectory)\eng\cibuild.cmd
              -configuration $(_BuildConfig) 
              -architecture $(_BuildArch)
              -prepareMachine 
              /p:SignType=$(_SignType)
              $(_PublishArgs)
            name: Build_Test
            displayName: Build / Test
            env:
              OfficialBuildId: $(BUILD.BUILDNUMBER)
            condition: succeeded()

      - ${{ if eq(parameters.agentOs, 'Linux') }}:
        - script: $(Build.SourcesDirectory)/eng/docker-cibuild.sh 
            --docker-image $(_DockerImageName)
            --source-directory $(Build.SourcesDirectory)
            --container-name diagnostics-$(Build.BuildId)
            --configuration $(_BuildConfig) 
            --architecture $(_BuildArch)
            --prepareMachine 
            /p:SignType=$(_SignType)
            $(_PublishArgs)
          name: Build_Test
          displayName: Docker Build / Test
          env:
            OfficialBuildId: $(BUILD.BUILDNUMBER)
          condition: succeeded()

      - ${{ if eq(parameters.agentOs, 'Darwin') }}:
        - script: $(Build.SourcesDirectory)/eng/cibuild.sh
            --configuration $(_BuildConfig) 
            --architecture $(_BuildArch)
            --prepareMachine
            /p:SignType=$(_SignType)
            $(_PublishArgs)
          name: Build_Test
          displayName: Build / Test
          env:
            OfficialBuildId: $(BUILD.BUILDNUMBER)
          condition: succeeded()

      - template: /eng/common/templates/steps/build-reason.yml
        parameters:
          conditions: not IndividualCI,BatchedCI,PullRequest
          steps:
          - task: CopyFiles@2
            displayName: Gather Logs
            inputs:
              SourceFolder: '$(Build.SourcesDirectory)/artifacts'
              Contents: '**/*log'
              TargetFolder: '$(Build.StagingDirectory)/BuildLogs'
            continueOnError: true
            condition: always()

          - task: PublishBuildArtifacts@1
            displayName: Publish Logs to VSTS
            inputs:
              PathtoPublish: '$(Build.StagingDirectory)/BuildLogs'
              PublishLocation: Container
              ${{ if eq(parameters.agentOs, 'Windows_NT') }}:
                ArtifactName: Windows_NT_$(Agent.JobName)
              ${{ if ne(parameters.agentOs, 'Windows_NT') }}:
                ArtifactName: Linux_$(_PhaseName)_$(Agent.JobName)
            continueOnError: true
            condition: always()
