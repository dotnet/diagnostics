stages:
- stage: PrepareReleaseStage
  displayName: Release Preparation
  jobs:
  - job: PrepareReleaseJob
    displayName: Prepare release with Darc
    ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')) }}:
      templateContext:
        outputs:
        - output: pipelineArtifact
          path: '$(System.ArtifactsDirectory)\ReleaseStaging'
          artifact: DiagnosticsRelease
          displayName: 'Publish Release Drop'
          condition: succeeded()
    variables:
    - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')) }}:
      - group: DotNet-Diagnostics-Storage
      - group: DotNet-DotNetStage-Storage
      - group: Release-Pipeline
    steps:
    - ${{ if in(variables['Build.Reason'], 'PullRequest') }}:
      - script: '$(Build.Repository.LocalPath)\dotnet.cmd build $(Build.Repository.LocalPath)\eng\release\DiagnosticsReleaseTool\DiagnosticsReleaseTool.csproj -c Release /bl'
        workingDirectory: '$(System.ArtifactsDirectory)'
        displayName: 'Build Manifest generation and asset publishing tool'
    - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')) }}:
      - task: UseDotNet@2
        displayName: 'Use .NET Core runtime 6.x'
        inputs:
          packageType: runtime
          version: 6.x
          installationPath: '$(Build.Repository.LocalPath)\.dotnet'
      - template: /eng/common/templates/post-build/setup-maestro-vars.yml
      - task: PowerShell@2
        displayName: 'DARC Gather build'
        inputs:
          targetType: filePath
          filePath: '$(Build.Repository.LocalPath)/eng/release/Scripts/AcquireBuild.ps1'
          arguments: >-
            -BarBuildId "$(BARBuildId)"
            -AzdoToken "$(dn-bot-dotnet-all-scopes)"
            -MaestroToken "$(MaestroAccessToken)"
            -GitHubToken "$(BotAccount-dotnet-bot-repo-PAT)"
            -DownloadTargetPath "$(System.ArtifactsDirectory)\ReleaseTarget"
            -SasSuffixes "$(dotnetclichecksumsmsrc-dotnet-read-list-sas-token),$(dotnetclimsrc-read-sas-token)"
            -ReleaseVersion "$(Build.BuildNumber)"
          workingDirectory: '$(Build.Repository.LocalPath)'
      - script: >-
          $(Build.Repository.LocalPath)\dotnet.cmd run --project $(Build.Repository.LocalPath)\eng\release\DiagnosticsReleaseTool\DiagnosticsReleaseTool.csproj -c Release
          --
          prepare-release
          --input-drop-path "$(System.ArtifactsDirectory)\ReleaseTarget"
          --tool-manifest "$(Build.Repository.LocalPath)\eng\release\tool-list.json"
          --staging-directory "$(System.ArtifactsDirectory)\ReleaseStaging"
          --release-name "$(Build.BuildNumber)"
          --account-name "$(dotnet-diagnostics-storage-accountname)"
          --account-key "$(dotnetstage-storage-key)"
          --container-name "$(dotnet-diagnostics-container-name)"
          --sas-valid-days "$(dotnet-diagnostics-storage-retentiondays)"
          -v True
        workingDirectory: '$(Build.Repository.LocalPath)\'
        displayName: 'Manifest generation and asset publishing'
