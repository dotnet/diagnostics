stages:
- stage: PrepareReleaseStage
  displayName: Release Preparation
  jobs:
  - job: PrepareReleaseJob
    displayName: Prepare Release
    ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')) }}:
      templateContext:
        outputs:
        - output: pipelineArtifact
          path: '$(System.ArtifactsDirectory)\ReleaseStaging'
          artifact: DiagnosticsRelease
          displayName: 'Publish Release Drop'
          condition: succeeded()
    variables:
    - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')) }}:
      - group: DotNet-Diagnostics-Storage
      - group: DotNetBuilds storage account read tokens
      - group: Release-Pipeline
    steps:
    - ${{ if in(variables['Build.Reason'], 'PullRequest') }}:
      - script: '$(Build.Repository.LocalPath)\dotnet.cmd build $(Build.Repository.LocalPath)\eng\release\DiagnosticsReleaseTool\DiagnosticsReleaseTool.csproj -c Release /bl'
        workingDirectory: '$(System.ArtifactsDirectory)'
        displayName: 'Build Manifest generation and asset publishing tool'
    - ${{ elseif and(ne(variables['System.TeamProject'], 'public'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/')) }}:
      - task: UseDotNet@2
        displayName: 'Use .NET Core runtime 6.x'
        inputs:
          packageType: runtime
          version: 6.x
          installationPath: '$(Build.Repository.LocalPath)\.dotnet'
      - template: /eng/common/templates/post-build/setup-maestro-vars.yml
      - task: PowerShell@2
        displayName: 'DARC Gather build'
        inputs:
          targetType: filePath
          filePath: '$(Build.Repository.LocalPath)/eng/release/Scripts/AcquireBuild.ps1'
          arguments: >-
            -BarBuildId "$(BARBuildId)"
            -ReleaseVersion "$(Build.BuildNumber)"
            -DownloadTargetPath "$(System.ArtifactsDirectory)\ReleaseTarget"
            -AzdoToken "$(dn-bot-all-drop-rw-code-rw-release-all)"
            -MaestroToken "$(MaestroAccessToken)"
            -SasSuffixes "$(dotnetbuilds-internal-checksums-container-read-token),$(dotnetbuilds-internal-container-read-token)"
          workingDirectory: '$(Build.Repository.LocalPath)'
      - task: AzureCLI@2
        displayName: 'Use WIF to obtain credentials for Azure CLI'
        inputs:
          azureSubscription: 'dotnetstage-diagnostics-tools-rw'
          scriptType: pscore
          scriptLocation: inlineScript
          addSpnToEnvironment: true
          inlineScript: |
              echo "##vso[task.setvariable variable=ARM_CLIENT_ID]$env:servicePrincipalId"
              echo "##vso[task.setvariable variable=ARM_ID_TOKEN]$env:idToken"
              echo "##vso[task.setvariable variable=ARM_TENANT_ID]$env:tenantId"
      - script: az login --service-principal -u $(ARM_CLIENT_ID) --tenant $(ARM_TENANT_ID) --allow-no-subscriptions --federated-token $(ARM_ID_TOKEN)
        displayName: 'Use az to authenticate using managed identity'
      - script: >-
          $(Build.Repository.LocalPath)\dotnet.cmd run --project $(Build.Repository.LocalPath)\eng\release\DiagnosticsReleaseTool\DiagnosticsReleaseTool.csproj -c Release
          --
          prepare-release
          --input-drop-path "$(System.ArtifactsDirectory)\ReleaseTarget"
          --tool-manifest "$(Build.Repository.LocalPath)\eng\release\tool-list.json"
          --staging-directory "$(System.ArtifactsDirectory)\ReleaseStaging"
          --release-name "$(Build.BuildNumber)"
          --account-name "$(dotnet-diagnostics-storage-accountname)"
          --client-id $(ARM_CLIENT_ID)
          --container-name "$(dotnet-diagnostics-container-name)"
          -v True
        workingDirectory: '$(Build.Repository.LocalPath)\'
        displayName: 'Manifest generation and asset publishing'
