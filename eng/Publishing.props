<Project>

  <PropertyGroup>
    <PublishDependsOnTargets>$(PublishDependsOnTargets);CollectPackageChecksumFiles</PublishDependsOnTargets>
  </PropertyGroup>

  <ItemGroup>
    <PackageChecksumFile Include="$(ArtifactsShippingPackagesDir)**\*.sha512" IsShipping="true" />
    <PackageChecksumFile Include="$(ArtifactsNonShippingPackagesDir)**\*.sha512" IsShipping="false" />
  </ItemGroup>

  <!-- Run the CollectPackageChecksumFiles target on each PackageChecksunFile by target batching on a non-existing file.
       This allows using the ReadLinesFromFile task to read the blob group file, which was written with WriteLinesToFile,
       thus avoiding erroneously reading in the newline at the end of the blob group file. -->
  <Target Name="CollectPackageChecksumFiles"
          Inputs="@(PackageChecksumFile)"
          Outputs="%(PackageChecksumFile.Identity).notexist">
    <!-- Find the blob group file next to the checksum file. -->
    <PropertyGroup>
      <_BlobGroupFilePath>%(PackageChecksumFile.RootDir)%(PackageChecksumFile.Directory)%(PackageChecksumFile.Filename).blobgroup</_BlobGroupFilePath>
    </PropertyGroup>
    <Error Message="Blob group file '$(_BlobGroupFilePath)' does not exist."
           Condition="!Exists('$(_BlobGroupFilePath)')" />
    <!-- Read in blob group name -->
    <ReadLinesFromFile File="$(_BlobGroupFilePath)">
      <Output TaskParameter="Lines" PropertyName="_BlobGroupName"/>
    </ReadLinesFromFile>
    <!-- Add ItemsToPushToBlobFeed for checksum file using blob group in relative blob path. -->
    <ItemGroup>
      <ItemsToPushToBlobFeed Include="%(PackageChecksumFile.Identity)">
        <RelativeBlobPath>diagnostics/$(_BlobGroupName)/%(PackageChecksumFile.Filename)%(PackageChecksumFile.Extension)</RelativeBlobPath>
        <ManifestArtifactData Condition="'%(PackageChecksumFile.IsShipping)' != 'true'">NonShipping=true</ManifestArtifactData>
        <PublishFlatContainer>true</PublishFlatContainer>
      </ItemsToPushToBlobFeed>
    </ItemGroup>
  </Target>

</Project>