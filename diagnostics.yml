parameters:
- name: runtimeFeed
  displayName: Feed for runtime installation
  type: string
  default: default
  values:
  - default
  - custom
  - msrc-feed
  - dotnetclimsrc-feed
- name: runtimeFeedToken
  displayName: Base 64 SAS Token for runtime installation
  type: string
  default: default
  values:
  - default
  - custom
  - msrc-feed-sas-token-base64
  - dotnetclimsrc-sas-token-base64

trigger: none

pr:
  autoCancel: true
  branches:
    include:
    - main
    - release/*
  paths:
    exclude:
    - documentation/*
    - THIRD-PARTY-NOTICES.TXT
    - LICENSE.TXT

variables:
  - name: _TeamName
    value: DotNetCore
  - name: _InternalBuildArgs
    value: ''
  - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
    - name: _SignType
      value: real
    # DotNet-Diagnostics-SDL-Params provides Tsa* variables for SDL checks.
    - group: DotNet-Diagnostics-SDL-Params
    - name: _InternalBuildArgs
      value: /p:DotNetSignType=$(_SignType)
        /p:TeamName=$(_TeamName)
        /p:DotNetPublishUsingPipelines=true
        /p:OfficialBuildId=$(BUILD.BUILDNUMBER)
    - group: DotNet-MSRC-Storage
    # Custom feed and token
    - ${{ if eq(parameters.runtimeFeed, 'custom') }}:
      - name: RuntimeFeedUrl
        value: $(DotnetRuntimeDownloadFeed)
    - ${{ if eq(parameters.runtimeFeedToken, 'custom') }}:
      - name: RuntimeFeedBase64SasToken
        value: $(DotnetRuntimeDownloadBase64SasToken)
    # MSRC dotnet feed. Usually on orchestrated 2.1 releases.
    - ${{ if eq(parameters.runtimeFeed, 'msrc-feed') }}:
      - name: RuntimeFeedUrl
        value: https://dotnetfeedmsrc.blob.core.windows.net
    - ${{ if eq(parameters.runtimeFeedToken, 'msrc-feed-sas-token-base64') }}:
      - name: RuntimeFeedBase64SasToken
        value: $(dotnetfeedmsrc-read-sas-token-base64)
    # dotnetclimsrc contains 3.1+
    - ${{ if eq(parameters.runtimeFeed, 'dotnetclimsrc-feed') }}:
      - name: RuntimeFeedUrl
        value: https://dotnetclimsrc.blob.core.windows.net/dotnet
    - ${{ if eq(parameters.runtimeFeedToken, 'dotnetclimsrc-sas-token-base64') }}:
      - name: RuntimeFeedBase64SasToken
        value: $(dotnetclimsrc-read-sas-token-base64)

stages:
  - stage: build
    displayName: Build and Test Diagnostics
    jobs:

    ############################
    #                          #
    #    Source Build legs     #
    #                          #
    ############################

    - template: /eng/common/templates/job/source-build.yml
      parameters:
        platform:
          name: Complete
          buildScript: ./eng/common/build.sh

    ############################
    #                          #
    #        Build legs        #
    #                          #
    ############################

    - template: /eng/build.yml
      parameters:
        name: Windows
        osGroup: Windows_NT
        strategy:
          matrix:
            Build_Debug:
              _BuildConfig: Debug
              _BuildArch: x64
            Build_Release:
              _BuildConfig: Release
              _BuildArch: x64
              _PublishArtifacts: bin
            Build_Release_x86:
              _BuildConfig: Release
              _BuildArch: x86
              _PublishArtifacts: bin/Windows_NT.x86.Release
            ${{ if ne(variables['System.TeamProject'], 'public') }}:
              Build_Release_arm:
                _BuildOnly: true
                _BuildConfig: Release
                _BuildArch: arm
                _PublishArtifacts: bin/Windows_NT.arm.Release
              Build_Release_arm64:
                _BuildOnly: true
                _BuildConfig: Release
                _BuildArch: arm64
                _PublishArtifacts: bin/Windows_NT.arm64.Release

    - template: /eng/build.yml
      parameters:
        name: CentOS_7
        osGroup: Linux
        dockerImage: mcr.microsoft.com/dotnet-buildtools/prereqs:centos-7-3e800f1-20190501005343
        strategy:
          matrix:
            Build_Debug:
              _BuildConfig: Debug
              _BuildArch: x64
              _PublishArtifacts: bin/Linux.x64.Debug
            Build_Release:
              _BuildConfig: Release
              _BuildArch: x64
              _PublishArtifacts: bin/Linux.x64.Release

    - template: /eng/build.yml
      parameters:
        name: Alpine3_13
        osGroup: Linux
        dockerImage: mcr.microsoft.com/dotnet-buildtools/prereqs:alpine-3.13-WithNode-20210728123842-ddfc481
        artifactsTargetPath: bin/Linux-musl.x64.Release
        requiresCapPtraceContainer: true
        strategy:
          matrix:
            Build_Release:
              _BuildConfig: Release
              _BuildArch: x64
              _PublishArtifacts: bin/Linux.x64.Release
            ${{ if in(variables['Build.Reason'], 'PullRequest') }}:
              Build_Debug:
                _BuildConfig: Debug
                _BuildArch: x64

    - template: /eng/build.yml
      parameters:
        name: MacOS
        osGroup: MacOS
        strategy:
          matrix:
            Build_Release:
              _BuildConfig: Release
              _BuildArch: x64
              _PublishArtifacts: bin/OSX.x64.Release
            ${{ if in(variables['Build.Reason'], 'PullRequest') }}:
              Build_Debug:
                _BuildConfig: Debug
                _BuildArch: x64

    - template: /eng/build.yml
      parameters:
        name: MacOS_cross
        osGroup: MacOS_cross
        buildAndSkipTest: true
        strategy:
          matrix:
            Build_Release:
              _BuildConfig: Release
              _BuildArch: arm64
              _PublishArtifacts: bin/OSX.arm64.Release
            ${{ if in(variables['Build.Reason'], 'PullRequest') }}:
              Build_Debug:
                _BuildConfig: Debug
                _BuildArch: arm64

    - ${{ if ne(variables['System.TeamProject'], 'public') }}:
      - template: /eng/build.yml
        parameters:
          name: Linux_cross
          osGroup: Linux
          dockerImage: mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-14.04-cross-1735d26-20190521133857
          crossrootfsDir: '/crossrootfs/arm'
          buildAndSkipTest: true
          strategy:
            matrix:
              Build_Release:
                _BuildConfig: Release
                _BuildArch: arm
                _PublishArtifacts: bin/Linux.arm.Release

      - template: /eng/build.yml
        parameters:
          name: Linux_cross64
          osGroup: Linux
          dockerImage: mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-16.04-cross-arm64-a3ae44b-20180315221921
          crossrootfsDir: '/crossrootfs/arm64'
          buildAndSkipTest: true
          strategy:
            matrix:
              Build_Release:
                _BuildConfig: Release
                _BuildArch: arm64
                _PublishArtifacts: bin/Linux.arm64.Release

      - template: /eng/build.yml
        parameters:
          name: Alpine_cross64
          osGroup: Linux
          dockerImage: mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-16.04-cross-arm64-alpine-20210719121212-b2c2436
          crossrootfsDir: '/crossrootfs/arm64'
          artifactsTargetPath: bin/Linux-musl.arm64.Release
          buildAndSkipTest: true
          strategy:
            matrix:
              Build_Release:
                _BuildConfig: Release
                _BuildArch: arm64
                _PublishArtifacts: bin/Linux.arm64.Release


      ############################
      #                          #
      #      Test only legs      #
      #                          #
      ############################

      - template: /eng/build.yml
        parameters:
          name: Debian_Stretch
          osGroup: Linux
          dockerImage: mcr.microsoft.com/dotnet-buildtools/prereqs:debian-stretch-3e800f1-20190521154431
          dependsOn: CentOS_7
          testOnly: true
          strategy:
            matrix:
              Build_Debug:
                _BuildConfig: Debug
                _BuildArch: x64

      - template: /eng/build.yml
        parameters:
          name: Fedora_28
          osGroup: Linux
          dockerImage: mcr.microsoft.com/dotnet-buildtools/prereqs:fedora-28-09ca40b-20190508143249
          dependsOn: CentOS_7
          testOnly: true
          requiresCapPtraceContainer: true
          strategy:
            matrix:
              Build_Debug:
                _BuildConfig: Debug
                _BuildArch: x64

      - template: /eng/build.yml
        parameters:
          name: Fedora_29
          osGroup: Linux
          dockerImage: mcr.microsoft.com/dotnet-buildtools/prereqs:fedora-29-09ca40b-20190508143249
          dependsOn: CentOS_7
          testOnly: true
          requiresCapPtraceContainer: true
          strategy:
            matrix:
              Build_Debug:
                _BuildConfig: Debug
                _BuildArch: x64

      - template: /eng/build.yml
        parameters:
          name: OpenSuse_42_1
          osGroup: Linux
          dockerImage: mcr.microsoft.com/dotnet-buildtools/prereqs:opensuse-42.1-c103199-20180628122439
          dependsOn: CentOS_7
          testOnly: true
          strategy:
            matrix:
              Build_Debug:
                _BuildConfig: Debug
                _BuildArch: x64

      - template: /eng/build.yml
        parameters:
          name: OpenSuse_42_3
          osGroup: Linux
          dockerImage: mcr.microsoft.com/dotnet-buildtools/prereqs:opensuse-42.3-3e800f1-20190501005344
          dependsOn: CentOS_7
          testOnly: true
          strategy:
            matrix:
              Build_Debug:
                _BuildConfig: Debug
                _BuildArch: x64

      - template: /eng/build.yml
        parameters:
          name: Ubuntu_16_04
          osGroup: Linux
          dockerImage: mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-16.04-09ca40b-20190520220842
          dependsOn: CentOS_7
          testOnly: true
          strategy:
            matrix:
              Build_Debug:
                _BuildConfig: Debug
                _BuildArch: x64

      - template: /eng/build.yml
        parameters:
          name: Ubuntu_18_04
          osGroup: Linux
          dockerImage: mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-3e800f1-20190508143252
          dependsOn: CentOS_7
          testOnly: true
          strategy:
            matrix:
              Build_Debug:
                _BuildConfig: Debug
                _BuildArch: x64

      # Download, sign, package and publish
      - ${{ if notin(variables['Build.Reason'], 'PullRequest') }}:
        - template: /eng/common/templates/job/job.yml
          parameters:
            name: Sign_Package_Publish
            displayName: Sign, Package, and Generate BAR Manifests
            dependsOn:
            - Windows
            - CentOS_7
            - Alpine3_13
            - MacOS
            - MacOS_cross
            - Linux_cross
            - Linux_cross64
            - Alpine_cross64
            condition: succeeded()
            pool:
              name: NetCoreInternal-Pool
              queue: BuildPool.Windows.10.Amd64.VS2019
            enablePublishUsingPipelines: true
            enableMicrobuild: true
            artifacts:
              publish:
                logs:
                  name: Logs_Packaging_Signing
            steps:
            - task: DownloadBuildArtifacts@0
              displayName: 'Download release builds'
              inputs:
                downloadPath: '$(Build.ArtifactStagingDirectory)/__download__'
                artifactName: Build_Release
                checkDownloadedFiles: true
            - task: CopyFiles@2
              displayName: 'Binplace Product'
              inputs:
                sourceFolder: $(Build.ArtifactStagingDirectory)/__download__/Build_Release
                targetFolder: '$(Build.SourcesDirectory)/artifacts/'

            # Windows x64 download. Everything under "bin" is published for the Windows x64 build.
            # Create nuget packages, sign binaries and publish to blob feed
            - script: $(Build.SourcesDirectory)\eng\ci-prepare-artifacts.cmd $(_InternalBuildArgs)
              displayName: Package, Sign, and Publish
              continueOnError: false
              condition: succeeded()

            # Publish package and log build artifacts
            - task: PublishBuildArtifacts@1
              displayName: Publish Package Artifacts
              inputs:
                publishLocation: Container
                pathtoPublish: '$(Build.SourcesDirectory)/artifacts/packages'
                artifactName: Packages
              continueOnError: true
              condition: always()

            - task: PublishBuildArtifacts@1
              displayName: Publish Bundled Tools
              inputs:
                publishLocation: Container
                pathtoPublish: '$(Build.SourcesDirectory)/artifacts/bundledtools'
                artifactName: BundledTools
              continueOnError: true
              condition: always()

        - template: /eng/common/templates/job/publish-build-assets.yml
          parameters:
            configuration: Release
            dependsOn: Sign_Package_Publish
            publishUsingPipelines: true
            pool:
              name: NetCoreInternal-Pool
              queue: buildpool.windows.10.amd64.vs2019

  - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
    - template: /eng/common/templates/post-build/post-build.yml
      parameters:
        # This is to enable SDL runs part of Post-Build Validation Stage.
        # as well as NuGet, SourceLink, and signing validation.
        # The variables get imported from group dotnet-diagnostics-sdl-params
        publishingInfraVersion: 3
        enableSourceLinkValidation: true
        enableSigningValidation: false
        enableSymbolValidation: false
        enableNugetValidation: true
        symbolPublishingAdditionalParameters: '/p:PublishSpecialClrFiles=false'
        publishInstallersAndChecksums: true
        SDLValidationParameters:
          enable: true
          continueOnError: true
          params: ' -SourceToolsList @("policheck","credscan")
          -TsaInstanceURL $(_TsaInstanceURL)
          -TsaProjectName $(_TsaProjectName)
          -TsaNotificationEmail $(_TsaNotificationEmail)
          -TsaCodebaseAdmin $(_TsaCodebaseAdmin)
          -TsaBugAreaPath $(_TsaBugAreaPath)
          -TsaIterationPath $(_TsaIterationPath)
          -TsaRepositoryName "diagnostics"
          -TsaCodebaseName "diagnostics"
          -TsaPublish $True'
          artifactNames:
          - 'Packages'
