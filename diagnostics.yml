parameters:
- name: runtimeFeed
  displayName: Feed for runtime installation
  type: string
  default: default
  values:
  - default
  - custom
  - dotnetclimsrc-feed
- name: runtimeFeedToken
  displayName: Base 64 SAS Token for runtime installation
  type: string
  default: default
  values:
  - default
  - custom
  - dotnetclimsrc-sas-token-base64

trigger: none

pr:
  autoCancel: true
  branches:
    include:
    - main
    - release/*
  paths:
    exclude:
    - documentation/*
    - THIRD-PARTY-NOTICES.TXT
    - LICENSE.TXT

variables:
- template : /eng/pipelines/global-variables.yml
  parameters:
    runtimeFeed: ${{ parameters.runtimeFeed }}
    runtimeFeedToken: ${{ parameters.runtimeFeedToken }}

extends:
  template: /eng/pipelines/pipeline-resources.yml
  parameters:
    stages:
    - stage: build
      displayName: Build and Test Diagnostics
      jobs:

        ############################
        #                          #
        #    Source Build legs     #
        #                          #
        ############################

      - template: ${{ variables.sourceBuildTemplate }}
        parameters:
          platform:
            name: Complete
            buildScript: ./eng/common/build.sh

      ############################
      #                          #
      #        Build legs        #
      #                          #
      ############################

      - template: /eng/pipelines/build.yml
        parameters:
          jobTemplate: ${{ variables.jobTemplate }}
          name: Windows
          osGroup: Windows_NT
          buildConfigs:
          - configuration: Debug
            architecture: x64
          - configuration: Release
            architecture: x64
            artifactUploadPath: bin
          - configuration: Release
            architecture: x86
            artifactUploadPath: bin/Windows_NT.x86.Release
          - ${{ if ne(variables['System.TeamProject'], 'public') }}:
            - configuration: Release
              architecture: arm
              artifactUploadPath: bin/Windows_NT.arm.Release
            - configuration: Release
              architecture: arm64
              artifactUploadPath: bin/Windows_NT.arm64.Release

      - template: /eng/pipelines/build.yml
        parameters:
          jobTemplate: ${{ variables.jobTemplate }}
          osGroup: Linux
          nativeBuildContainer: linux_x64
          buildOnly: true
          buildConfigs:
          - configuration: Release
            architecture: x64
            artifactUploadPath: bin/linux.x64.Release
          - ${{ if in(variables['Build.Reason'], 'PullRequest') }}:
            - configuration: Debug
              architecture: x64
              artifactUploadPath: bin/linux.x64.Debug

      - template: /eng/pipelines/build.yml
        parameters:
          jobTemplate: ${{ variables.jobTemplate }}
          name: Linux_musl
          osGroup: Linux
          osSuffix: -musl
          nativeBuildContainer: linux_musl_x64
          crossBuild: true
          buildOnly: true
          buildConfigs:
          - configuration: Release
            architecture: x64
            artifactUploadPath: bin/linux.x64.Release
            artifactTargetPath: bin/linux-musl.x64.Release
          - ${{ if in(variables['Build.Reason'], 'PullRequest') }}:
            - configuration: Debug
              architecture: x64
              artifactUploadPath: bin/linux.x64.Debug
              artifactTargetPath: bin/linux-musl.x64.Debug

      - template: /eng/pipelines/build.yml
        parameters:
          jobTemplate: ${{ variables.jobTemplate }}
          osGroup: MacOS
          buildConfigs:
          - configuration: Release
            architecture: x64
            artifactUploadPath: bin/osx.x64.Release
          - ${{ if in(variables['Build.Reason'], 'PullRequest') }}:
            - configuration: Debug
              architecture: x64

      - template: /eng/pipelines/build.yml
        parameters:
          jobTemplate: ${{ variables.jobTemplate }}
          osGroup: MacOS
          crossBuild: true
          buildOnly: true
          buildConfigs:
          - configuration: Release
            architecture: arm64
            artifactUploadPath: bin/osx.arm64.Release
          - ${{ if in(variables['Build.Reason'], 'PullRequest') }}:
            - configuration: Debug
              architecture: arm64

      - ${{ if ne(variables['System.TeamProject'], 'public') }}:
        - template: /eng/pipelines/build.yml
          parameters:
            jobTemplate: ${{ variables.jobTemplate }}
            osGroup: Linux
            nativeBuildContainer: linux_arm
            crossBuild: true
            buildOnly: true
            buildConfigs:
            - configuration: Release
              architecture: arm
              artifactUploadPath: bin/linux.arm.Release

        - template: /eng/pipelines/build.yml
          parameters:
            jobTemplate: ${{ variables.jobTemplate }}
            osGroup: Linux
            nativeBuildContainer: linux_arm64
            crossBuild: true
            buildOnly: true
            buildConfigs:
            - configuration: Release
              architecture: arm64
              artifactUploadPath: bin/linux.arm64.Release

        - template: /eng/pipelines/build.yml
          parameters:
            jobTemplate: ${{ variables.jobTemplate }}
            name: Linux_musl
            osGroup: Linux
            osSuffix: -musl
            nativeBuildContainer: linux_musl_arm
            crossBuild: true
            buildOnly: true
            buildConfigs:
            - configuration: Release
              architecture: arm
              artifactUploadPath: bin/linux.arm.Release
              artifactTargetPath: bin/linux-musl.arm.Release

        - template: /eng/pipelines/build.yml
          parameters:
            jobTemplate: ${{ variables.jobTemplate }}
            name: Linux_musl
            osGroup: Linux
            osSuffix: -musl
            nativeBuildContainer: linux_musl_arm64
            crossBuild: true
            buildOnly: true
            buildConfigs:
            - configuration: Release
              architecture: arm64
              artifactUploadPath: bin/linux.arm64.Release
              artifactTargetPath: bin/linux-musl.arm64.Release

      ############################
      #                          #
      #      Test only legs      #
      #                          #
      ############################

      - template: /eng/pipelines/build.yml
        parameters:
          jobTemplate: ${{ variables.jobTemplate }}
          name: Ubuntu_20_04
          osGroup: Linux
          container: test_ubuntu_20_04
          dependsOn: Linux
          testOnly: true
          buildConfigs:
          - configuration: Release
            architecture: x64
          - ${{ if in(variables['Build.Reason'], 'PullRequest') }}:
            - configuration: Debug
              architecture: x64

      - template: /eng/pipelines/build.yml
        parameters:
          jobTemplate: ${{ variables.jobTemplate }}
          name: Ubuntu_22_04
          osGroup: Linux
          container: test_ubuntu_22_04
          dependsOn: Linux
          testOnly: true
          buildConfigs:
          - configuration: Release
            architecture: x64
          - ${{ if in(variables['Build.Reason'], 'PullRequest') }}:
            - configuration: Debug
              architecture: x64

      - template: /eng/pipelines/build.yml
        parameters:
          jobTemplate: ${{ variables.jobTemplate }}
          name: Alpine3_19
          osGroup: Linux
          osSuffix: -musl
          container: test_linux_musl_x64
          dependsOn: Linux_musl
          testOnly: true
          disableComponentGovernance: true
          buildConfigs:
          - configuration: Release
            architecture: x64
          - ${{ if in(variables['Build.Reason'], 'PullRequest') }}:
            - configuration: Debug
              architecture: x64

      - ${{ if ne(variables['System.TeamProject'], 'public') }}:
        - template: /eng/pipelines/build.yml
          parameters:
            jobTemplate: ${{ variables.jobTemplate }}
            name: Debian_Bullseye
            osGroup: Linux
            container: test_debian_11_amd64
            dependsOn: Linux
            testOnly: true
            buildConfigs:
            - configuration: Release
              architecture: x64
            - ${{ if in(variables['Build.Reason'], 'PullRequest') }}:
              - configuration: Debug
                architecture: x64

        - template: /eng/pipelines/build.yml
          parameters:
            jobTemplate: ${{ variables.jobTemplate }}
            name: Fedora_39
            osGroup: Linux
            container: test_fedora
            dependsOn: Linux
            testOnly: true
            buildConfigs:
            - configuration: Release
              architecture: x64
            - ${{ if in(variables['Build.Reason'], 'PullRequest') }}:
              - configuration: Debug
                architecture: x64

    - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
      - stage: package
        displayName: Package, Sign, and Generate BAR Manifests
        jobs:
        - template: /eng/common/templates-official/job/job.yml
          parameters:
            name: Package_Sign_Publish
            displayName: Packaging
            condition: succeeded()
            enablePublishUsingPipelines: true
            enableMicrobuild: true
            templateContext:
              outputs:
              - output: pipelineArtifact
                artifact: BundledTools
                path: '$(Build.SourcesDirectory)/artifacts/bundledtools'
                displayName: 'Publish Bundled Tools'
                condition: succeeded()
              - output: pipelineArtifact
                artifact: Logs_Packaging_Signing_Attempt$(System.JobAttempt)
                path: '$(Build.SourcesDirectory)/artifacts/log'
                displayName: 'Publish Signing and Packaging Logs'
                condition: always()
                continueOnError: true
                sbomEnabled: false # we don't need SBOM for logs
            steps:
            - task: DownloadPipelineArtifact@2
              displayName: 'Download release builds'
              inputs:
                patterns: |
                  Build_Linux_*_Release/bin/**
                  Build_Linux_musl_*_Release/bin/**
                  Build_Windows_*_Release/bin/**
                  Build_MacOS_*_Release/bin/**
                downloadPath: '$(Build.ArtifactStagingDirectory)/__download__'
                checkDownloadedFiles: true
                cleanDestinationFolder: true

            - powershell: |
                cd $(Build.ArtifactStagingDirectory)/__download__

                $dirs = Get-ChildItem -Directory
                if ($dirs.Count -ne 12) {
                  throw "Expected 12 release platforms to be present. 3 Linux glibc, 3 Linux musl, 4 Windows, and 2 macOS."
                }

                $targetDir = "$(Build.SourcesDirectory)/artifacts/bin"
                if (!(Test-Path $targetDir)) {
                  New-Item $targetDir -ItemType Directory
                }

                $dirs | ForEach-Object {
                  $sourceDir = "$($_.FullName)/bin"
                  Move-Item -Path $sourceDir/* -Destination $targetDir -Verbose
                }
              displayName: 'Setup layout for packaging'

            # Create nuget packages, sign binaries and publish to blob feed
            - script: $(Build.SourcesDirectory)\eng\ci-prepare-artifacts.cmd /p:DotNetSignType=$(_SignType) /p:TeamName=$(_TeamName) /p:DotNetPublishUsingPipelines=true /p:OfficialBuildId=$(BUILD.BUILDNUMBER)
              displayName: Package, Sign, and Publish
              continueOnError: false
              condition: succeeded()

        - template: /eng/common/templates-official/job/publish-build-assets.yml
          parameters:
            configuration: Release
            dependsOn: Package_Sign_Publish
            publishUsingPipelines: true

      - template: /eng/common/templates-official/post-build/post-build.yml@self
        parameters:
          # This is to enable SDL runs part of Post-Build Validation Stage.
          # as well as NuGet, SourceLink, and signing validation.
          # The variables get imported from group dotnet-diagnostics-sdl-params
          validateDependsOn: package
          publishingInfraVersion: 3
          enableSourceLinkValidation: true
          enableSigningValidation: false
          enableSymbolValidation: false
          enableNugetValidation: true
          symbolPublishingAdditionalParameters: '/p:PublishSpecialClrFiles=false'
          publishInstallersAndChecksums: true

      # This sets up the bits to do a Release.
      - template: /eng/pipelines/prepare-release.yml
